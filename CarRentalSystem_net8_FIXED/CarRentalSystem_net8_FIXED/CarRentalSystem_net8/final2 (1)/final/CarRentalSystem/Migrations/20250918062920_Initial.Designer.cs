// <auto-generated />
using System;
using CarRentalSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRentalSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250918062920_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarRentalSystem.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"));

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BookingID");

                    b.HasIndex("CarID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Car", b =>
                {
                    b.Property<int>("CarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarID"));

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("CarID");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            CarID = 1,
                            CarModel = "2024",
                            CarName = "Honda Civic",
                            ImageUrl = "/images/honda-civic.jpg",
                            IsAvailable = true
                        },
                        new
                        {
                            CarID = 2,
                            CarModel = "2024",
                            CarName = "Toyota Camry",
                            ImageUrl = "/images/toyota-camry.jpg",
                            IsAvailable = true
                        },
                        new
                        {
                            CarID = 3,
                            CarModel = "2024",
                            CarName = "Tesla Model 3",
                            ImageUrl = "/images/tesla-model3.jpg",
                            IsAvailable = true
                        },
                        new
                        {
                            CarID = 4,
                            CarModel = "2024",
                            CarName = "BMW 3 Series",
                            ImageUrl = "/images/bmw-3series.jpg",
                            IsAvailable = true
                        },
                        new
                        {
                            CarID = 5,
                            CarModel = "2024",
                            CarName = "Mercedes C-Class",
                            ImageUrl = "/images/mercedes-cclass.jpg",
                            IsAvailable = true
                        },
                        new
                        {
                            CarID = 6,
                            CarModel = "2024",
                            CarName = "Audi A4",
                            ImageUrl = "/images/audi-a4.jpg",
                            IsAvailable = true
                        },
                        new
                        {
                            CarID = 7,
                            CarModel = "2024",
                            CarName = "Ford Mustang",
                            ImageUrl = "/images/ford-mustang.jpg",
                            IsAvailable = true
                        },
                        new
                        {
                            CarID = 8,
                            CarModel = "2024",
                            CarName = "Chevrolet Camaro",
                            ImageUrl = "/images/chevrolet-camaro.jpg",
                            IsAvailable = true
                        },
                        new
                        {
                            CarID = 9,
                            CarModel = "2024",
                            CarName = "Nissan Altima",
                            ImageUrl = "/images/nissan-altima.jpg",
                            IsAvailable = true
                        },
                        new
                        {
                            CarID = 10,
                            CarModel = "2024",
                            CarName = "Hyundai Sonata",
                            ImageUrl = "/images/hyundai-sonata.jpg",
                            IsAvailable = true
                        },
                        new
                        {
                            CarID = 11,
                            CarModel = "2024",
                            CarName = "Kia Optima",
                            ImageUrl = "/images/kia-optima.jpg",
                            IsAvailable = true
                        },
                        new
                        {
                            CarID = 12,
                            CarModel = "2024",
                            CarName = "Mazda 6",
                            ImageUrl = "/images/mazda-6.jpg",
                            IsAvailable = true
                        },
                        new
                        {
                            CarID = 13,
                            CarModel = "2024",
                            CarName = "Subaru Legacy",
                            ImageUrl = "/images/subaru-legacy.jpg",
                            IsAvailable = true
                        },
                        new
                        {
                            CarID = 14,
                            CarModel = "2024",
                            CarName = "Volkswagen Jetta",
                            ImageUrl = "/images/volkswagen-jetta.jpg",
                            IsAvailable = true
                        },
                        new
                        {
                            CarID = 15,
                            CarModel = "2024",
                            CarName = "Lexus ES",
                            ImageUrl = "/images/lexus-es.jpg",
                            IsAvailable = true
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("VerificationExpiresAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Email = "",
                            IsEmailVerified = false,
                            Password = "admin123",
                            Role = "Admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Models.Booking", b =>
                {
                    b.HasOne("CarRentalSystem.Models.Car", "Car")
                        .WithMany("Bookings")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Models.User", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CarRentalSystem.Models.Car", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("CarRentalSystem.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
